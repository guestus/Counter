/*
   Homeyduino firmware for %

*/

#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <DNSServer.h>
#include <ESP8266WebServer.h>
#include <WiFiManager.h>
#include <SoftwareSerial.h>
#include <Homey.h>

#if defined(ESP8266) && !defined(D5)
#define D5 (14)
#define D6 (12)
#define D7 (13)
#define D8 (15)
#endif


WiFiManager wifiManager;
SoftwareSerial readerSerial; //(13,15,false,256);

unsigned long previousMillis = 0;
const unsigned long interval = 5000; //Interval in milliseconds

void setup() {
  Serial.begin(115200);
  readerSerial.begin(9600, SWSERIAL_8N1, D5, D6, false, 256);
  readerSerial.setTransmitEnablePin(D7); 
  readerSerial.enableRx(true);  

  String deviceName = "Mercury-" + String(ESP.getChipId()); //Generate device name based on ID

  Serial.println("wifiManager...");
  wifiManager.autoConnect(deviceName.c_str(), ""); //Start wifiManager
  Serial.println("Connected!");

  Homey.begin(deviceName); //Start Homeyduino
  Homey.setClass("sensor");
  Homey.addCapability("measure_voltage");
  Homey.addCapability("measure_current");
  Homey.addCapability("measure_power");
  Homey.addCapability("meter_powerXday");
  Homey.addCapability("meter_powerXnight");
}

void loop() {
  Homey.loop();
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis > interval) {
    previousMillis = currentMillis;
    UpdateCapability();
  }
}


void UpdateCapability() {
  process_counter();
}


int crc16_modbus(String str1) {
  const uint8_t auchCRCHi[]  = { 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
                              0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
                              0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
                              0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
                              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
                              0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
                              0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
                              0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
                              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
                              0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
                              0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
                              0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
                              0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
                              0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
                              0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
                              0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
                              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
                              0x40
                            };
  const uint8_t auchCRCLo[] =  {  0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
                               0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
                               0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
                               0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
                               0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
                               0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
                               0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
                               0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
                               0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
                               0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
                               0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
                               0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
                               0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
                               0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
                               0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
                               0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
                               0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
                               0x40
                            };
  int len  = str1.length();
  uint16_t uchCRCHi   = 0xFF;
  uint16_t uchCRCLo   = 0xFF;
  int uIndex     = 0;
  for (int i = 0; i < len; i+=2) {
    uint8_t b= hexToDec(str1.substring(i,i+2));
    uIndex     = uchCRCLo ^ b;
    uchCRCLo   = uchCRCHi ^ auchCRCHi[uIndex];
    uchCRCHi   = auchCRCLo[uIndex] ;
  }
  return uchCRCLo * 256 + uchCRCHi;
}


String nice_hex(String str1) {
  String res;
  str1.toUpperCase();
  while (str1.length() > 0) {
    res = res + str1.substring(0, 2);
    str1.remove(0, 2);
    if (str1.length() > 0) {
      res += ' ';
    }
  }
  return res;
}
unsigned int hexToDec(String hexString) {
  unsigned int decValue = 0;
  int nextInt;
  for (int i = 0; i < hexString.length(); i++) {
    nextInt = int(hexString.charAt(i));
    if (nextInt >= 48 && nextInt <= 57) nextInt = map(nextInt, 48, 57, 0, 9);
    if (nextInt >= 65 && nextInt <= 70) nextInt = map(nextInt, 65, 70, 10, 15);
    if (nextInt >= 97 && nextInt <= 102) nextInt = map(nextInt, 97, 102, 10, 15);
    nextInt = constrain(nextInt, 0, 15);
    decValue = (decValue * 16) + nextInt;
  }
  return decValue;
}

void print_hex(String str) {
  for (int i = 0; i < str.length(); i = i + 2) {
    readerSerial.write((uint8_t)hexToDec(str.substring(i, i + 2)));
  }
}

void process_counter() {
  float Uv = 0;
  float Ia = 0;
  float Pv = 0;
  float tarif =  0;
  float tarif2 = 0;
  String res2 = "";
  String res = "";
  String cmd = "";
  unsigned long currentMillis;

  cmd = "0056584127"; // 00 + 0EB6DE Адрес + 27 команда
  cmd += String(crc16_modbus(cmd), HEX);
  cmd.toUpperCase();
  //Serial.println(cmd);
  print_hex(cmd);
  delay(250);
  while (readerSerial.available() > 0) {
      uint8_t b=readerSerial.read();
      if (b<16) { res2 +=( "0"+String(b, HEX));}
      else { res2 += String(b, HEX);}
  }
 
  cmd = "0056584163"; // 00 + 0EB6DE Адрес + 63 команда
  cmd += String(crc16_modbus(cmd), HEX);
  cmd.toUpperCase();
  //Serial.println(cmd);
  print_hex(cmd);
  delay(250);
  while (readerSerial.available() > 0) {
      uint8_t b=readerSerial.read();
      if (b<16) { res += ("0"+String(b, HEX));}
      else { res += String(b, HEX); }  
  }

  if (res.length() > 0) {
  //00565841 63 2350 0258 000537 b5fa
    Uv = (float)(res.substring(10, 14)).toInt() / 10;
    Ia = (float)(res.substring(14, 18)).toInt() / 100;
    Pv = (float)(res.substring(18, 24)).toInt();
  };
  if (res2.length() > 0) {
  //056411690890000000030ffffffff
    tarif =  (float)(res2.substring(10, 18)).toInt() / 100;
    tarif2 = (float)(res2.substring(18, 26)).toInt() / 100;
  };
  Serial.println(String(Uv)+';'+String(Ia)+';'+String(Pv)+';'+String(tarif)+','+String(tarif2));
  Homey.setCapabilityValue("measure_voltage", Uv);
  Homey.setCapabilityValue("measure_current", Ia);
  Homey.setCapabilityValue("measure_power", Pv);
  Homey.setCapabilityValue("meter_powerXday", tarif);
  Homey.setCapabilityValue("meter_powerXnight", tarif2);
}
